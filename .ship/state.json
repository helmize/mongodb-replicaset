{
  "v1": {
    "config": null,
    "helmValues": "replicas: 3\nport: 27017\n\nreplicaSetName: rs0\n\npodDisruptionBudget: {}\n  # maxUnavailable: 1\n  # minAvailable: 2\n\nauth:\n  enabled: false\n  # adminUser: username\n  # adminPassword: password\n  # metricsUser: metrics\n  # metricsPassword: password\n  # key: keycontent\n  # existingKeySecret:\n  # existingAdminSecret:\n  # exisitingMetricsSecret:\n\n## Optionally specify an array of imagePullSecrets.\n## Secrets must be manually created in the namespace.\n## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/\n##\nimagePullSecrets: []\n#   - myRegistrKeySecretName\n\n# Specs for the Docker image for the init container that establishes the replica set\ninstallImage:\n  repository: unguiculus/mongodb-install\n  tag: 0.7\n  pullPolicy: IfNotPresent\n\n# Specs for the Docker image for the copyConfig init container\ncopyConfigImage:\n  repository: busybox\n  tag: 1.29.3\n  pullPolicy: IfNotPresent\n\n# Specs for the MongoDB image\nimage:\n  repository: mongo\n  tag: 3.6\n  pullPolicy: IfNotPresent\n\n# Additional environment variables to be set in the container\nextraVars: {}\n# - name: TCMALLOC_AGGRESSIVE_DECOMMIT\n#   value: \"true\"\n\n# Prometheus Metrics Exporter\nmetrics:\n  enabled: false\n  image:\n    repository: ssalaues/mongodb-exporter\n    tag: 0.6.1\n    pullPolicy: IfNotPresent\n  port: 9216\n  path: \"/metrics\"\n  socketTimeout: 3s\n  syncTimeout: 1m\n  prometheusServiceDiscovery: true\n  resources: {}\n\n# Annotations to be added to MongoDB pods\npodAnnotations: {}\n\nsecurityContext:\n  runAsUser: 999\n  fsGroup: 999\n  runAsNonRoot: true\n\ninit:\n  resources: {}\n  timeout: 900\n\nresources: {}\n# limits:\n#   cpu: 500m\n#   memory: 512Mi\n# requests:\n#   cpu: 100m\n#   memory: 256Mi\n\n## Node selector\n## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector\nnodeSelector: {}\n\naffinity: {}\n\ntolerations: []\n\nextraLabels: {}\n\n# priorityClassName: \"\"\n\npersistentVolume:\n  enabled: true\n  ## mongodb-replicaset data Persistent Volume Storage Class\n  ## If defined, storageClassName: \u003cstorageClass\u003e\n  ## If set to \"-\", storageClassName: \"\", which disables dynamic provisioning\n  ## If undefined (the default) or set to null, no storageClassName spec is\n  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on\n  ##   GKE, AWS \u0026 OpenStack)\n  ##\n  # storageClass: \"-\"\n  accessModes:\n    - ReadWriteOnce\n  size: 10Gi\n  annotations: {}\n\n# Annotations to be added to the service\nserviceAnnotations: {}\n\nterminationGracePeriodSeconds: 30\n\ntls:\n  # Enable or disable MongoDB TLS support\n  enabled: false\n  # Please generate your own TLS CA by generating it via:\n  # $ openssl genrsa -out ca.key 2048\n  # $ openssl req -x509 -new -nodes -key ca.key -days 10000 -out ca.crt -subj \"/CN=mydomain.com\"\n  # After that you can base64 encode it and paste it here:\n  # $ cat ca.key | base64 -w0\n  # cacert:\n  # cakey:\n\n# Entries for the MongoDB config file\nconfigmap: {}\n\n# Javascript code to execute on each replica at initContainer time\n# This is the recommended way to create indexes on replicasets.\n# Below is an example that creates indexes in foreground on each replica in standalone mode.\n# ref: https://docs.mongodb.com/manual/tutorial/build-indexes-on-replica-sets/\n# initMongodStandalone: |+\n#   db = db.getSiblingDB(\"mydb\")\n#   db.my_users.createIndex({email: 1})\n\n# Readiness probe\nreadinessProbe:\n  initialDelaySeconds: 5\n  timeoutSeconds: 1\n  failureThreshold: 3\n  periodSeconds: 10\n  successThreshold: 1\n\n# Liveness probe\nlivenessProbe:\n  initialDelaySeconds: 30\n  timeoutSeconds: 5\n  failureThreshold: 3\n  periodSeconds: 10\n  successThreshold: 1\n",
    "releaseName": "mongodb-replicaset",
    "helmValuesDefaults": "replicas: 3\nport: 27017\n\nreplicaSetName: rs0\n\npodDisruptionBudget: {}\n  # maxUnavailable: 1\n  # minAvailable: 2\n\nauth:\n  enabled: false\n  # adminUser: username\n  # adminPassword: password\n  # metricsUser: metrics\n  # metricsPassword: password\n  # key: keycontent\n  # existingKeySecret:\n  # existingAdminSecret:\n  # exisitingMetricsSecret:\n\n## Optionally specify an array of imagePullSecrets.\n## Secrets must be manually created in the namespace.\n## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/\n##\nimagePullSecrets: []\n#   - myRegistrKeySecretName\n\n# Specs for the Docker image for the init container that establishes the replica set\ninstallImage:\n  repository: unguiculus/mongodb-install\n  tag: 0.7\n  pullPolicy: IfNotPresent\n\n# Specs for the Docker image for the copyConfig init container\ncopyConfigImage:\n  repository: busybox\n  tag: 1.29.3\n  pullPolicy: IfNotPresent\n\n# Specs for the MongoDB image\nimage:\n  repository: mongo\n  tag: 3.6\n  pullPolicy: IfNotPresent\n\n# Additional environment variables to be set in the container\nextraVars: {}\n# - name: TCMALLOC_AGGRESSIVE_DECOMMIT\n#   value: \"true\"\n\n# Prometheus Metrics Exporter\nmetrics:\n  enabled: false\n  image:\n    repository: ssalaues/mongodb-exporter\n    tag: 0.6.1\n    pullPolicy: IfNotPresent\n  port: 9216\n  path: \"/metrics\"\n  socketTimeout: 3s\n  syncTimeout: 1m\n  prometheusServiceDiscovery: true\n  resources: {}\n\n# Annotations to be added to MongoDB pods\npodAnnotations: {}\n\nsecurityContext:\n  runAsUser: 999\n  fsGroup: 999\n  runAsNonRoot: true\n\ninit:\n  resources: {}\n  timeout: 900\n\nresources: {}\n# limits:\n#   cpu: 500m\n#   memory: 512Mi\n# requests:\n#   cpu: 100m\n#   memory: 256Mi\n\n## Node selector\n## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector\nnodeSelector: {}\n\naffinity: {}\n\ntolerations: []\n\nextraLabels: {}\n\n# priorityClassName: \"\"\n\npersistentVolume:\n  enabled: true\n  ## mongodb-replicaset data Persistent Volume Storage Class\n  ## If defined, storageClassName: \u003cstorageClass\u003e\n  ## If set to \"-\", storageClassName: \"\", which disables dynamic provisioning\n  ## If undefined (the default) or set to null, no storageClassName spec is\n  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on\n  ##   GKE, AWS \u0026 OpenStack)\n  ##\n  # storageClass: \"-\"\n  accessModes:\n    - ReadWriteOnce\n  size: 10Gi\n  annotations: {}\n\n# Annotations to be added to the service\nserviceAnnotations: {}\n\nterminationGracePeriodSeconds: 30\n\ntls:\n  # Enable or disable MongoDB TLS support\n  enabled: false\n  # Please generate your own TLS CA by generating it via:\n  # $ openssl genrsa -out ca.key 2048\n  # $ openssl req -x509 -new -nodes -key ca.key -days 10000 -out ca.crt -subj \"/CN=mydomain.com\"\n  # After that you can base64 encode it and paste it here:\n  # $ cat ca.key | base64 -w0\n  # cacert:\n  # cakey:\n\n# Entries for the MongoDB config file\nconfigmap: {}\n\n# Javascript code to execute on each replica at initContainer time\n# This is the recommended way to create indexes on replicasets.\n# Below is an example that creates indexes in foreground on each replica in standalone mode.\n# ref: https://docs.mongodb.com/manual/tutorial/build-indexes-on-replica-sets/\n# initMongodStandalone: |+\n#   db = db.getSiblingDB(\"mydb\")\n#   db.my_users.createIndex({email: 1})\n\n# Readiness probe\nreadinessProbe:\n  initialDelaySeconds: 5\n  timeoutSeconds: 1\n  failureThreshold: 3\n  periodSeconds: 10\n  successThreshold: 1\n\n# Liveness probe\nlivenessProbe:\n  initialDelaySeconds: 30\n  timeoutSeconds: 5\n  failureThreshold: 3\n  periodSeconds: 10\n  successThreshold: 1\n",
    "upstream": "github.com/helm/charts/stable/mongodb-replicaset",
    "metadata": {
      "applicationType": "helm",
      "icon": "https://webassets.mongodb.com/_com_assets/cms/mongodb-logo-rgb-j6w271g1xn.jpg",
      "name": "mongodb-replicaset",
      "releaseNotes": "[stable/mongodb-replicaset] Add priority class to pods (#10339)\n\n* Add priority class to mongodb statefulset\n\nSigned-off-by: Victor Boissiere \u003cvictor.boissiere@neo9.fr\u003e\n\n* Increase minor version\n\nSigned-off-by: Victor Boissiere \u003cvictor.boissiere@neo9.fr\u003e",
      "version": "3.9.0"
    },
    "contentSHA": "17ee3ce98cfe6c0403cd0b477e8a16f790cedaab2a9025bd15f62777b10e706e",
    "lifecycle": {
      "stepsCompleted": {
        "intro": true,
        "kustomize": true,
        "kustomize-intro": true,
        "outro": true,
        "render": true,
        "values": true
      }
    }
  }
}